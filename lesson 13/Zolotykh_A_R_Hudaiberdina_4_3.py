class Circle:
    count = 0#создаем атрибут класса - счетчик
    radius = 0#создаем атрибут класса - радиус. Он будет равен равен радиусу
            #последнего создаваемого круга, либо можно выставить вручную

    def __init__(self, radius_circle):#конструктор класса с 1 атрибутом экземпляра - радиусом
         self.radius = radius_circle#присваиваем значение атрибуту экземпляра класса радиусу
         Circle.radius = radius_circle#приравниваем атрибут класса радиус к атрибуту экземплара класса (тоже радиус)
         Circle.count +=1#меняем счетчик на +1 при создании нового экземпляра класса

    @classmethod#декоратор метода класса
    def total_object(cls):#позволяет обращаться к атрибуту класса и выводить его значение в консоль
        print(cls.count)

    @classmethod#декоратор метода класса
    def from_diameter(cls, diameter):#принимает переменную диаметр
        return cls(int(diameter/2))#запускается исходный конструктор, который вместо радиуса принимает поделенный на 2 диаметр

    @staticmethod#статический метод, не принимающий ничего
    def radius_estimation():
        if Circle.radius > 0:#оценивает атрибут класса радиус
            return True
        else:
            return False

circle_1 = Circle(26)#создаем экзепляр класса
circle_1.total_object()#узнаем изменение счетчика
print(circle_1.radius_estimation())#узнаем, больше ли 1 радиус созданного круга
circle_2 = Circle.from_diameter(100)#создаем второй экзепляр класса, но через метод класса из диаметра. Раус должен быть 50.
circle_2.total_object()#счетчик теперь будет равен 2
print(circle_2.radius)#проверяем радиус - он равен 50. Метод класса сработал верно
print(circle_2.radius_estimation())#проверяем статическим методом, что радиус последнего круга больше 1. Получаем True


